/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom 
 * the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 @defgroup cmsis-plus-core CMSIS++ Core
 @brief  CMSIS++ Core summary page.
 @details
 TODO: add core definitions.
 */

/**
 @defgroup cmsis-plus-startup CMSIS++ Startup
 @brief  CMSIS++ Startup summary page.
 @details
 TODO: add startup definitions.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-rtos CMSIS++ RTOS C++ API
 @brief  CMSIS++ RTOS C++ API summary page.
 @details
 The C++ API is the main interface to the CMSIS++ RTOS, and is the native
 interface used for the implementation.

 The API is composed of a series of classes, subclasses, types and  
 several namespaces.

 To use the C++ API, include the `<cmsis-plus/rtos/os.h>` header.

 */

/**
 @defgroup cmsis-plus-rtos-core Core & scheduler
 @ingroup cmsis-plus-rtos
 @brief  C++ API scheduler definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-thread Threads
 @ingroup cmsis-plus-rtos
 @brief  C++ API threads definitions.
 @details

 @par Examples

 @code{.cpp}
void*
func (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);

  return nullptr;
}

int
os_main (int argc, char* argv[])
{
    {
      // Regular threads.
      thread th1
        { func, nullptr };
      thread th2
        { "th2", func, nullptr };

      th1.join ();
      th2.join ();
    }

  using my_thread = thread_allocated<memory::new_delete_allocator<thread::stack::allocation_element_t>>;

  // Allocated threads.
    {
      my_thread ath1
        { func, nullptr };
      my_thread ath2
        { "ath2", func, nullptr };

      ath1.join ();
      ath2.join ();
    }

    {
#pragma GCC diagnostic push
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wexit-time-destructors"
#endif
      // Statically allocated threads.
      static thread_static<> sth1
        { func, nullptr };
      static thread_static<> sth2
        { "sth2", func, nullptr };
#pragma GCC diagnostic pop

      sth1.join ();
      sth2.join ();
    }

  // --------------------------------------------------------------------------

    {
      std::size_t n;

      n = thread::stack::default_size ();
      thread::stack::default_size (n);

      n = thread::stack::min_size ();
      thread::stack::min_size (n);

      class thread::stack& stack = this_thread::thread ().stack ();

      stack.bottom ();

      stack.top ();

      stack.check_bottom_magic ();
      stack.check_top_magic ();
    }

  // --------------------------------------------------------------------------

    {
      this_thread::flags_clear (flags::all);

      this_thread::thread ().flags_raise (0x3);
      this_thread::flags_wait (0x3, nullptr, flags::mode::all);

      this_thread::thread ().flags_raise (0x3);
      this_thread::flags_try_wait (0x3);

      this_thread::thread ().flags_raise (0x3);
      this_thread::flags_timed_wait (0x3, 10);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-clock Clocks
 @ingroup cmsis-plus-rtos
 @brief  C++ API clocks definitions.
 @details

 @par Examples

 @code{.cpp}
  // TODO
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-condvar Condition variables
 @ingroup cmsis-plus-rtos
 @brief  C++ API condition variables definitions.
 @details

 @par Examples

 @code{.cpp}
int
os_main (int argc, char* argv[])
{
    {
      condition_variable cv1;
      cv1.signal ();

      condition_variable cv2
        { "cv2" };
      cv2.signal ();
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-evflag Event flags
 @ingroup cmsis-plus-rtos
 @brief  C++ API event flags definitions.
 @details

 @par Examples

 @code{.cpp}
int
os_main (int argc, char* argv[])
{
    {
      event_flags ev1;
      ev1.clear (1);

      event_flags ev2
        { "ev2" };
      ev2.clear (1);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-mempool Memory pools
 @ingroup cmsis-plus-rtos
 @brief  C++ API memory pools definitions.
 @details

 @par Examples

 @code{.cpp}
typedef struct my_blk_s
{
  int i;
  const char* s;
} my_blk_t;

int
os_main (int argc, char* argv[])
{
  my_blk_t* blk;

  // Classic usage; block size and cast to char* must be supplied manually.
    {
      memory_pool cp1
        { 3, sizeof(my_blk_t) };

      blk = static_cast<my_blk_t*> (cp1.alloc ());
      cp1.free (blk);

      blk = static_cast<my_blk_t*> (cp1.try_alloc ());
      cp1.free (blk);

      blk = static_cast<my_blk_t*> (cp1.timed_alloc (1));
      cp1.free (blk);

      memory_pool cp2
        { "cp2", 3, sizeof(my_blk_t) };

      blk = static_cast<my_blk_t*> (cp2.alloc ());
      cp2.free (blk);

    }

  // --------------------------------------------------------------------------

  // Template usage; block size and cast are supplied automatically.

  // Define a custom queue type parametrised with the
  // message type.
  using My_pool = memory_pool_typed<my_blk_t>;

    {
      My_pool tp1
        { 7 };

      blk = tp1.alloc ();
      tp1.free (blk);

      blk = tp1.try_alloc ();
      tp1.free (blk);

      blk = tp1.timed_alloc (1);
      tp1.free (blk);

      My_pool tp2
        { "tp2", 7 };

      blk = tp2.alloc ();
      tp2.free (blk);
    }

  // --------------------------------------------------------------------------

  // Allocated template usage; block size is supplied automatically.

  // Define a custom pool type parametrised with the
  // block type and the pool size.
  using My_static_pool = memory_pool_static<my_blk_t, 4>;

    {
      // The space for the pool is allocated inside the pool
      // object, in this case on the stack.
      My_static_pool sp1;

      blk = sp1.alloc ();
      sp1.free (blk);

      blk = sp1.try_alloc ();
      sp1.free (blk);

      blk = sp1.timed_alloc (1);
      sp1.free (blk);

      My_static_pool sp2
        { "sp2" };

      blk = sp2.alloc ();
      sp2.free (blk);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-mqueue Message queues
 @ingroup cmsis-plus-rtos
 @brief  C++ API message queues definitions.
 @details

 @par Examples

 @code{.cpp}
typedef struct my_msg_s
{
  int i;
  const char* s;
} my_msg_t;

int
os_main (int argc, char* argv[])
{
  my_msg_t msg_out
    { 1, "msg" };

  my_msg_t msg_in;

  // --------------------------------------------------------------------------

  // Classic usage; message size and cast to char* must be supplied manually.
    {
      message_queue cq1
        { 3, sizeof(my_msg_t) };

      cq1.send (&msg_out, sizeof(my_msg_t));

      message_queue cq2
        { "cq2", 3, sizeof(my_msg_t) };

      cq2.send (&msg_out, sizeof(my_msg_t));
    }

  // --------------------------------------------------------------------------

  // Template usage; message size and cast are supplied automatically.

  // Define a custom queue type parametrised with the
  // message type.
  using My_queue = message_queue_typed<my_msg_t>;

    {
      My_queue tq1
        { 7 };

      tq1.send (&msg_out);
      tq1.receive (&msg_in);

      tq1.try_send (&msg_out);
      tq1.try_receive (&msg_in);

      tq1.timed_send (&msg_out, 1);
      tq1.timed_receive (&msg_in, 1);

      My_queue tq2
        { "tq2", 7 };

      tq2.send (&msg_out);
      tq2.receive (&msg_in);
    }

  // --------------------------------------------------------------------------

  // Allocated template usage; message size and cast are supplied automatically.

  // Define a custom queue type parametrised with the
  // message type and the queue size.
  using My_static_queue = message_queue_static<my_msg_t, 4>;

    {
      // The space for the queue is allocated inside the queue
      // object, in this case on the stack.
      My_static_queue sq1;

      sq1.send (&msg_out);
      sq1.receive (&msg_in);

      sq1.try_send (&msg_out);
      sq1.try_receive (&msg_in);

      sq1.timed_send (&msg_out, 1);
      sq1.timed_receive (&msg_in, 1);

      My_static_queue sq2
        { "sq2" };

      sq2.send (&msg_out);
      sq2.receive (&msg_in);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-mutex Mutexes
 @ingroup cmsis-plus-rtos
 @brief  C++ API mutexes definitions.
 @details

 @par Examples

 @code{.cpp}
int
os_main (int argc, char* argv[])
{
    {
      mutex mx1;
      mx1.lock ();
      mx1.unlock ();

      mx1.try_lock ();
      mx1.unlock ();

      mx1.timed_lock (10);
      mx1.unlock ();

      mx1.name ();

      mx1.type ();
      mx1.protocol ();
      mx1.robustness ();
      mx1.owner ();

      thread::priority_t prio = mx1.prio_ceiling ();
      mx1.prio_ceiling (prio);

      mx1.reset ();
    }

    {
      mutex mx2
        { "mx2" };
      mx2.lock ();
      mx2.unlock ();
    }

    {
      mutex mx3
        { "mx2", mutex::initializer_recursive };
      mx3.lock ();
      mx3.unlock ();
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-semaphore Semaphores
 @ingroup cmsis-plus-rtos
 @brief  C++ API semaphores definitions.
 @details

 @par Examples

 @code{.cpp}
int
os_main (int argc, char* argv[])
{
    {
      // Binary semaphore.
      semaphore_binary sp1;
      sp1.post ();
    }

    {
      // Named binary semaphore.
      semaphore_binary sp2
        { "sp2" };

      sp2.post ();
      sp2.wait ();

      sp2.post ();
      sp2.try_wait ();

      sp2.post ();
      sp2.timed_wait (1);

      sp2.post ();
      sp2.timed_wait (0xFFFFFFFF);
    }

    {
      // Named counting semaphore.
      semaphore_counting sp3
        { "sp3", 7 };
      sp3.post ();
    }

    {
      // Named counting semaphore with custom initial value.
      semaphore_counting sp4
        { "sp4", 7, 7 };
      sp4.post ();
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-timer Timers
 @ingroup cmsis-plus-rtos
 @brief  C++ API timers definitions.
 @details

 @par Examples

 @code{.cpp}
void
tmfunc (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);
}

int
os_main (int argc, char* argv[])
{
    {
      // Single-shot timer.
      timer tm1
        { tmfunc, nullptr };
      sysclock.sleep_for (1); // Sync
      tm1.start (1);

      sysclock.sleep_for (2);
      tm1.stop ();
    }

    {
      // Named single-shot timer.
      timer tm2
        { "tm2", tmfunc, nullptr };
      sysclock.sleep_for (1); // Sync
      tm2.start (1);

      sysclock.sleep_for (2);
      tm2.stop ();
    }

    {
      // Named periodic timer.
      timer tm3
        { "tm3", tmfunc, nullptr, timer::periodic_initializer };
      sysclock.sleep_for (1); // Sync
      tm3.start (1);

      sysclock.sleep_for (2);
      tm3.stop ();
    }
}
 @endcode
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-rtos-c CMSIS++ RTOS C API
 @brief  CMSIS++ RTOS C API summary page.
 @details
 The C API maps most of the basic C++ functionality to C programmers.
 Usually the overhead is minimal, one function call. The object pointer
 is passsed as the first parameter. The names are prefixed with a unique
 string inspired by the namespace qualifier.

 To use the C API, include the `<cmsis-plus/rtos/os-c-api.h>` header.
 */

/**
 @defgroup cmsis-plus-rtos-c-core Core & scheduler
 @ingroup cmsis-plus-rtos-c
 @brief  C API core & scheduler definitions.
 @details

 @see @ref cmsis-plus-rtos-core "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      flag = os_sched_is_started ();
      assert(flag);

      // ...
        {
          // Scheduler critical section
          os_sched_state_t st;
          st = os_sched_lock (true);

          // ...
          flag = os_sched_is_locked ();
          assert(flag);

          // ...
          os_sched_unlock (st);
        }

      // ...
      flag = os_sched_is_locked ();
      assert(!flag);
    }

    {
      // Interrupts critical section
      os_irq_state_t st;
      st = os_irq_critical_enter ();
      // ...
        {
          // Interrupts uncritical section
          os_irq_state_t st2;
          st2 = os_irq_uncritical_enter ();
          // ...
          os_irq_uncritical_exit (st2);
        }
      // ...
      os_irq_critical_exit (st);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-thread Threads
 @ingroup cmsis-plus-rtos-c
 @brief  C API thread definitions.
 @details

 @see @ref cmsis-plus-rtos-thread "RTOS C++ API"

 @par Examples

 @code{.c}
void*
func (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);

  return NULL;
}

int
os_main (int argc, char* argv[])
{
    {
      // Unnamed default thread; stack dynamically allocated.
      os_thread_t th1;
      os_thread_create (&th1, NULL, func, NULL, NULL);

      name = os_thread_get_name (&th1);

      os_thread_join (&th1, NULL);

      // The destroy() is recommended, but not mandatory when using join().
      // The test checks if join() fully destroys the thread.
      // os_thread_destroy(&th1);
    }

    {
      // Named default threads.
      os_thread_t th2;
      os_thread_create (&th2, "th2", func, NULL, NULL);

      os_thread_join (&th2, NULL);

      // os_thread_destroy(&th2);
    }

    {
      // Custom thread with static stack and lower priority.
      static char stack[2 * OS_INTEGER_RTOS_DEFAULT_STACK_SIZE_BYTES];

      os_thread_attr_t ath3;
      os_thread_attr_init (&ath3);
      ath3.th_priority = os_thread_priority_below_normal;
      ath3.th_stack_address = stack;
      ath3.th_stack_size_bytes = sizeof(stack);

      os_thread_t th3;
      os_thread_create (&th3, "th3", func, NULL, &ath3);

      os_thread_prio_t prio;
      prio = os_thread_get_priority (&th3);
      os_thread_set_priority (os_this_thread (), prio);

      // Lower main thread priority to allow task to run.
      os_thread_set_priority (os_this_thread (), os_thread_priority_below_normal);

      os_thread_join (&th3, NULL);

      // Restore main thread priority.
      os_thread_set_priority (os_this_thread (), os_thread_priority_normal);

      // os_thread_destroy(&th3);
    }

    {
      os_this_thread_flags_clear (os_flags_all, NULL);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_wait (0x3, NULL, os_flags_mode_all);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_try_wait (0x3, NULL, os_flags_mode_all);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_timed_wait (0x3, 10, NULL, os_flags_mode_all);
    }

    {
      size_t n;

      n = os_thread_stack_get_default_size ();
      os_thread_stack_set_default_size (n);

      n = os_thread_stack_get_min_size ();
      os_thread_stack_set_min_size (n);

      os_thread_stack_t* stack;
      stack = os_thread_get_stack (os_this_thread ());

      os_thread_stack_get_bottom (stack);

      os_thread_stack_get_top (stack);

      os_thread_stack_check_bottom_magic (stack);
      os_thread_stack_check_top_magic (stack);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-clock Clocks
 @ingroup cmsis-plus-rtos-c
 @brief  C API clocks definitions.
 @details

 @see os::rtos::clock

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_sysclock_sleep_for (2);

      os_clock_timestamp_t ts;
      // Return number of ticks since epoch, or, if epoch not set, from startup.
      ts = os_sysclock_now ();

      os_sysclock_sleep_until (ts + 2);

      // Return the number of ticks since startup.
      ts = os_sysclock_steady_now ();

      // An event may resume the thread before the timeout expire.
      os_sysclock_wait_for (2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-condvar Condition variables
 @ingroup cmsis-plus-rtos-c
 @brief  C API condition variable definitions.
 @details

 @see @ref cmsis-plus-rtos-condvar "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_condvar_t cv1;
      os_condvar_create (&cv1, "cv1", NULL);

      os_condvar_signal (&cv1);

      os_condvar_broadcast (&cv1);

      // TODO: test os_condvar_wait()

      name = os_condvar_get_name (&cv1);

      os_condvar_destroy (&cv1);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-evflag Event flags
 @ingroup cmsis-plus-rtos-c
 @brief  C API event flags definitions.
 @details

 @see @ref cmsis-plus-rtos-evflag "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_evflags_t ev1;
      os_evflags_create (&ev1, "ev1", NULL);

      // Clear all flags.
      os_evflags_clear (&ev1, 0x0, NULL);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_wait (&ev1, 0x1, NULL,
                       os_flags_mode_all | os_flags_mode_clear);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_try_wait (&ev1, 0x1, NULL,
                           os_flags_mode_all | os_flags_mode_clear);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_timed_wait (&ev1, 0x1, 1, NULL,
                             os_flags_mode_all | os_flags_mode_clear);

      os_evflags_get (&ev1, 0x1, os_flags_mode_clear);

      name = os_evflags_get_name (&ev1);

      os_evflags_destroy (&ev1);
    }

    {
      // Initialise custom event flags with a specific clock.
      os_evflags_attr_t aev2;
      os_evflags_attr_init (&aev2);

      aev2.clock = os_clock_get_rtclock ();

      os_evflags_t ev2;
      os_evflags_create (&ev2, "ev2", &aev2);

      os_evflags_destroy (&ev2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mempool Memory pools
 @ingroup cmsis-plus-rtos-c
 @brief  C API memory pool definitions.
 @details

 @see @ref cmsis-plus-rtos-mempool "RTOS C++ API"

 @par Examples

 @code{.c}
typedef struct my_blk_s
{
  int i;
  const char* s;
} my_blk_t;

int
os_main (int argc, char* argv[])
{
  my_blk_t* blk;

    {
      // Simple pool, dynamically allocated.
      os_mempool_t p1;
      os_mempool_create (&p1, "p1", 3, sizeof(my_blk_t), NULL);

      blk = os_mempool_alloc (&p1);
      os_mempool_free (&p1, blk);

      blk = os_mempool_try_alloc (&p1);
      os_mempool_free (&p1, blk);

      blk = os_mempool_timed_alloc (&p1, 1);
      os_mempool_free (&p1, blk);

      os_mempool_destroy (&p1);
    }

    {
      // Static pool.
      static char pool[1000];

      os_mempool_attr_t ap2;
      os_mempool_attr_init (&ap2);
      ap2.mp_pool_address = pool;
      ap2.mp_pool_size_bytes = sizeof(pool);
      ap2.clock = os_clock_get_rtclock ();

      os_mempool_t p2;
      os_mempool_create (&p2, "p2", 3, sizeof(my_blk_t), &ap2);

      blk = os_mempool_alloc (&p2);

      os_mempool_free (&p2, blk);

      os_mempool_reset (&p2);

      os_mempool_destroy (&p2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mqueue Message queues
 @ingroup cmsis-plus-rtos-c
 @brief  C API message queue definitions.
 @details

 @see @ref cmsis-plus-rtos-mqueue "RTOS C++ API"

 @par Examples

 @code{.c}
typedef struct my_msg_s
{
  int i;
  const char* s;
} my_msg_t;

int
os_main (int argc, char* argv[])
{
  // Define two messages.

  my_msg_t msg_out =
    { 1, "msg" };

  my_msg_t msg_in =
    { 0, NULL };

    {
      // Simple queues, dynamically allocated.
      os_mqueue_t q1;
      os_mqueue_create (&q1, "q1", 3, sizeof(my_msg_t), NULL);

      os_mqueue_send (&q1, &msg_out, sizeof(msg_out), 0);
      os_mqueue_try_send (&q1, &msg_out, sizeof(msg_out), 0);
      os_mqueue_timed_send (&q1, &msg_out, 1, sizeof(msg_out), 0);

      msg_in.i = 0;
      os_mqueue_receive (&q1, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      msg_in.i = 0;
      os_mqueue_try_receive (&q1, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      msg_in.i = 0;
      os_mqueue_timed_receive (&q1, &msg_in, sizeof(msg_in), 1, NULL);
      assert(msg_in.i = 1);

      const char* str;
      size_t n;

      str = os_mqueue_get_name (&q1);
      assert(strcmp (str, "q1") == 0);

      n = os_mqueue_get_capacity (&q1);
      assert(n == 3);

      n = os_mqueue_get_length (&q1);
      assert(n == 0);

      n = os_mqueue_get_msg_size (&q1);
      assert(n == sizeof(my_msg_t));

      os_mqueue_is_empty (&q1);

      os_mqueue_is_full (&q1);

      os_mqueue_reset (&q1);

      os_mqueue_destroy (&q1);
    }

    {
      // Static queue.
      // TODO: add macro to compute size.
      static char queue[1000];

      os_mqueue_attr_t aq2;
      os_mqueue_attr_init (&aq2);
      aq2.mq_queue_addr = queue;
      aq2.mq_queue_size_bytes = sizeof(queue);
      aq2.clock = os_clock_get_rtclock ();

      os_mqueue_t q2;
      os_mqueue_create (&q2, "q2", 3, sizeof(my_msg_t), &aq2);

      os_mqueue_send (&q2, &msg_out, sizeof(msg_out), 0);

      msg_in.i = 0;
      os_mqueue_receive (&q2, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      os_mqueue_destroy (&q2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mutex Mutexes
 @ingroup cmsis-plus-rtos-c
 @brief  C API mutex definitions.
 @details

 @see @ref cmsis-plus-rtos-mutex "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_mutex_t mx1;
      os_mutex_create (&mx1, "mx1", NULL);

      os_mutex_lock (&mx1);
      os_mutex_unlock (&mx1);

      os_mutex_try_lock (&mx1);
      os_mutex_unlock (&mx1);

      os_mutex_timed_lock (&mx1, 1);
      os_mutex_unlock (&mx1);

      name = os_mutex_get_name (&mx1);
      assert(strcmp (name, "mx1") == 0);

      os_thread_prio_t prio;
      prio = os_mutex_get_prio_ceiling (&mx1);

      os_mutex_set_prio_ceiling (&mx1, prio, NULL);

      os_thread_t* th;
      th = os_mutex_get_owner (&mx1);
      if (th != NULL)
        {
          os_thread_get_name (th);
        }

      os_mutex_reset (&mx1);

      os_mutex_destroy (&mx1);
    }

    {
      // Custom mutex, with RTC.
      os_mutex_attr_t amx2;
      os_mutex_attr_init (&amx2);

      amx2.mx_priority_ceiling = os_thread_priority_high;
      amx2.mx_protocol = os_mutex_protocol_protect;
      amx2.mx_type = os_mutex_type_recursive;
      amx2.mx_max_count = 7;
      amx2.mx_robustness = os_mutex_robustness_stalled;
      amx2.clock = os_clock_get_rtclock ();

      os_mutex_t mx2;
      os_mutex_create (&mx2, "mx2", &amx2);

      os_mutex_destroy (&mx2);
    }

    {
      // Recursive mutex.
      os_mutex_t mx3;
      os_mutex_create (&mx3, "mx3", os_mutex_attr_get_recursive ());

      os_mutex_destroy (&mx3);
    }

    {
      // Custom recursive mutex, with RTC.
      os_mutex_attr_t amx4;
      os_mutex_attr_init_recursive (&amx4);

      amx4.clock = os_clock_get_rtclock ();

      os_mutex_t mx4;
      os_mutex_create (&mx4, "mx4", &amx4);

      os_mutex_destroy (&mx4);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-semaphore Semaphores
 @ingroup cmsis-plus-rtos-c
 @brief  C API semaphore definitions.
 @details

 @see @ref cmsis-plus-rtos-semaphore "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      // Binary semaphore, start at 0.
      os_semaphore_t sp1;
      os_semaphore_binary_create (&sp1, "sp1", 0);

      os_semaphore_post (&sp1);
      os_semaphore_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_try_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_timed_wait (&sp1, 1);

      os_semaphore_get_value (&sp1);

      os_semaphore_get_initial_value (&sp1);

      os_semaphore_reset (&sp1);

      name = os_semaphore_get_name (&sp1);

      os_semaphore_destroy (&sp1);
    }

    {
      // Custom semaphore.
      os_semaphore_attr_t asp2;
      os_semaphore_attr_init (&asp2);

      asp2.sm_initial_value = 3;
      asp2.sm_max_value = 7;
      asp2.clock = os_clock_get_rtclock ();

      os_semaphore_t sp2;
      os_semaphore_create (&sp2, "sp2", &asp2);

      os_semaphore_destroy (&sp2);
    }

    {
      // Counting semaphore, 7 resources, start at 7.
      os_semaphore_t sp3;
      os_semaphore_counting_create (&sp3, "sp3", 7, 7);

      os_semaphore_destroy (&sp3);
    }

    {
      // Custom binary semaphore.
      os_semaphore_attr_t asp4;
      os_semaphore_attr_binary_init (&asp4, 0);
      asp4.clock = os_clock_get_rtclock ();

      os_semaphore_t sp4;
      os_semaphore_create (&sp4, "sp4", &asp4);

      os_semaphore_destroy (&sp4);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-timer Timers
 @ingroup cmsis-plus-rtos-c
 @brief  C API timer definitions.
 @details

 @see @ref cmsis-plus-rtos-timer "RTOS C++ API"

 @code{.c}
void
tmfunc (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);
}

int
os_main (int argc, char* argv[])
{
   {
      os_timer_t tm1;
      os_timer_create (&tm1, "tm1", tmfunc, NULL, NULL);

      os_sysclock_sleep_for (1); // Sync
      os_timer_start (&tm1, 1);

      os_sysclock_sleep_for (2);

      os_timer_stop (&tm1);

      name = os_timer_get_name (&tm1);
      assert(strcmp (name, "tm1") == 0);

      os_timer_destroy (&tm1);
    }

    {
      // Periodic timer
      os_timer_t tm2;
      os_timer_create (&tm2, "tm2", tmfunc, NULL,
                       os_timer_attr_get_periodic ());

      os_sysclock_sleep_for (1); // Sync
      os_timer_start (&tm2, 1);

      os_sysclock_sleep_for (2);

      os_timer_stop (&tm2);

      name = os_timer_get_name (&tm2);
      assert(strcmp (name, "tm2") == 0);

      os_timer_destroy (&tm2);
    }
}
 @endcode
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-iso CMSIS++ ISO Standard C++ Threads
 @brief  CMSIS++ ISO Threads summary page.
 @details
 This page groups the main CMSIS++ ISO Threads classes and namespaces.

 @par Standards
 These definitions provide implementations for the classes defined in 
 the **C++ Standard ISO/IEC 14882:2011(E) Third edition (2011-09-01)**.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-drivers CMSIS++ Drivers
 @brief  CMSIS++ Drivers summary page.
 @details
 This page groups the main CMSIS++ Driver classes. 

 TODO: add content
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-diag CMSIS++ Diag
 @brief  CMSIS++ Diagnostic & Trace summary page.
 @details
 This page groups the main classes providing support for 
 diagnostics. For example the `trace::printf()` functions are defined here.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-posix-io CMSIS++ POSIX I/O
 @brief  CMSIS++ POSIX I/O summary page.
 @details
 This page groups the main classes providing support for standard
 POSIX I/O (uniform access to dtream devices, files, sockets).

 TODO: add content
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-app-config CMSIS++ App Config
 @brief  CMSIS++ application configuration definitions.
 @details
 Applications using CMSIS++ can be configured during 
 build time using
 several proprocessor definitions, grouped in a header file 
 named `<cmsis-plus/os-app-config.h>`.

 There are two kinds of definitions:

 - definitions with values (`OS_INTEGER_*`, `OS_BOOL_*`, `OS_STRING_*`, ...);
 for these definitions the value should be used 
 only in an expression of the given type; to avoid misunderstandings,
 parenthesis are recommended;
 - definitions without values (`OS_INCLUDE_*`, `OS_EXCLUDE_*`, `OS_USE_*`, 
 `OS_TRACE_*`, ...); for these definitions only the presence should be tested;
 the value, if present, should be completely ignored.
 
 */

/**
 @defgroup cmsis-plus-app-config-cmdline Command line options
 @ingroup cmsis-plus-app-config
 @brief  Definitions passed via the compiler command line.
 @details
 Most of the configuration options can be passed via the configuration file,
 but this requires each source file to include the configuration files. 
 However some options are too important to be missed and should be 
 passed via the compiler command line.
 */

/**
 @defgroup cmsis-plus-app-config-startup Start-up & general options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the program start-up.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-lib Library options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure various library options.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-rtos RTOS options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the RTOS.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-trace Trace options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the trace channel.
 @details
 In addition to the global `TRACE` definition, it is possible to
 enable individual groups of messages, using separate definitions.
 */

/**
 @defgroup cmsis-plus-app-config-port Custom RTOS options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to select various custom RTOS port implementations.
 @details
 The CMSIS++ RTOS API can be configured to run on top of another
 RTOS scheduler (like FreeRTOS). It is also possible to select
 each synchronisation objects to use either the custom port objects or
 the CMSIS++ reference C++ implementations.
 */

/**
 @defgroup cmsis-plus-app-hooks CMSIS++ App Hooks
 @brief  CMSIS++ application hooks.
 @details
 Applications using CMSIS++ can customise the behaviour 
 of the system or intercept several events by redefining 
 several hooks.

 All hooks have weak default definitions, effective if the application
 does not redefine the functions.
 
 */

// ----------------------------------------------------------------------------
