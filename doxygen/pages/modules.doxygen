/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom 
 * the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 @defgroup cmsis-plus-core CMSIS++ Core
 @brief  CMSIS++ Core summary page.
 @details
 TODO: add core definitions.
 */

/**
 @defgroup cmsis-plus-startup CMSIS++ Startup
 @brief  CMSIS++ Startup summary page.
 @details
 TODO: add startup definitions.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-rtos CMSIS++ RTOS C++ API
 @brief  CMSIS++ RTOS C++ API summary page.
 @details
 The C++ API is the main interface to the CMSIS++ RTOS, and is the native
 interface used for the implementation.

 The API is composed of a series of classes, subclasses, types and  
 several namespaces.

 To use the C++ API, include the `<cmsis-plus/rtos/os.h>` header.

 */

/**
 @defgroup cmsis-plus-rtos-core Core & scheduler
 @ingroup cmsis-plus-rtos
 @brief  C++ API scheduler definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-thread Threads
 @ingroup cmsis-plus-rtos
 @brief  C++ API threads definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-clock Clocks
 @ingroup cmsis-plus-rtos
 @brief  C++ API clocks definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-condvar Condition variables
 @ingroup cmsis-plus-rtos
 @brief  C++ API condition variables definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-evflag Event flags
 @ingroup cmsis-plus-rtos
 @brief  C++ API event flags definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-mempool Memory pools
 @ingroup cmsis-plus-rtos
 @brief  C++ API memory pools definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-mqueue Message queues
 @ingroup cmsis-plus-rtos
 @brief  C++ API message queues definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-mutex Mutexes
 @ingroup cmsis-plus-rtos
 @brief  C++ API mutexes definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-semaphore Semaphores
 @ingroup cmsis-plus-rtos
 @brief  C++ API semaphores definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-timer Timers
 @ingroup cmsis-plus-rtos
 @brief  C++ API timers definitions.
 @details
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-rtos-c CMSIS++ RTOS C API
 @brief  CMSIS++ RTOS C API summary page.
 @details
 The C API maps most of the basic C++ functionality to C programmers.
 Usually the overhead is minimal, one function call. The object pointer
 is passsed as the first parameter. The names are prefixed with a unique
 string inspired by the namespace qualifier.

 To use the C API, include the `<cmsis-plus/rtos/os-c-api.h>` header.
 */

/**
 @defgroup cmsis-plus-rtos-c-core Core & scheduler
 @ingroup cmsis-plus-rtos-c
 @brief  C API scheduler definitions.
 @details
 */

/**
 @defgroup cmsis-plus-rtos-c-thread Threads
 @ingroup cmsis-plus-rtos-c
 @brief  C API thread definitions.
 @details

 @see os::rtos::thread
 */

/**
 @defgroup cmsis-plus-rtos-c-clock Clocks
 @ingroup cmsis-plus-rtos-c
 @brief  C API clocks definitions.
 @details

 @see os::rtos::clock
 */

/**
 @defgroup cmsis-plus-rtos-c-condvar Condition variables
 @ingroup cmsis-plus-rtos-c
 @brief  C API condition variable definitions.
 @details

 @see os::rtos::condition_variable
 */

/**
 @defgroup cmsis-plus-rtos-c-evflag Event flags
 @ingroup cmsis-plus-rtos-c
 @brief  C API event flags definitions.
 @details

 @see os::rtos::event_flags
 */

/**
 @defgroup cmsis-plus-rtos-c-mempool Memory pools
 @ingroup cmsis-plus-rtos-c
 @brief  C API memory pool definitions.
 @details

 @see os::rtos::memory_pool
 */

/**
 @defgroup cmsis-plus-rtos-c-mqueue Message queues
 @ingroup cmsis-plus-rtos-c
 @brief  C API message queue definitions.
 @details

 @see os::rtos::message_queue
 */

/**
 @defgroup cmsis-plus-rtos-c-mutex Mutexes
 @ingroup cmsis-plus-rtos-c
 @brief  C API mutex definitions.
 @details

 @see os::rtos::mutex
 */

/**
 @defgroup cmsis-plus-rtos-c-semaphore Semaphores
 @ingroup cmsis-plus-rtos-c
 @brief  C API semaphore definitions.
 @details

 @see os::rtos::semaphore

 @par Examples

 @code{.cpp}
    {
      // Default counting semaphore.
      os_semaphore_t sp1;
      os_semaphore_create (&sp1, "sp1", NULL);

      os_semaphore_post (&sp1);
      os_semaphore_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_try_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_timed_wait (&sp1, 1);

      os_semaphore_get_value (&sp1);

      os_semaphore_get_initial_value (&sp1);

      os_semaphore_reset (&sp1);

      name = os_semaphore_get_name (&sp1);

      os_semaphore_destroy (&sp1);
    }

    {
      // Custom semaphore.
      os_semaphore_attr_t asp2;
      os_semaphore_attr_init (&asp2);

      asp2.sm_initial_count = 3;
      asp2.sm_max_count = 7;
      asp2.clock = os_clock_get_rtclock ();

      os_semaphore_t sp2;
      os_semaphore_create (&sp2, "sp2", &asp2);

      os_semaphore_destroy (&sp2);
    }

    {
      // Binary semaphore.
      os_semaphore_t sp3;
      os_semaphore_create (&sp3, "sp3", os_semaphore_attr_get_binary ());

      os_semaphore_destroy (&sp3);
    }

    {
      // Custom binary semaphore.
      os_semaphore_attr_t asp4;
      os_semaphore_attr_init_binary (&asp4);
      asp4.clock = os_clock_get_rtclock ();

      os_semaphore_t sp4;
      os_semaphore_create (&sp4, "sp4", &asp4);

      os_semaphore_destroy (&sp4);
    }
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-timer Timers
 @ingroup cmsis-plus-rtos-c
 @brief  C API timer definitions.
 @details

 @see os::rtos::timer
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-iso CMSIS++ ISO Standard C++ Threads
 @brief  CMSIS++ ISO Threads summary page.
 @details
 This page groups the main CMSIS++ ISO Threads classes and namespaces.

 @par Standards
 These definitions provide implementations for the classes defined in 
 the **C++ Standard ISO/IEC 14882:2011(E) Third edition (2011-09-01)**.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-drivers CMSIS++ Drivers
 @brief  CMSIS++ Drivers summary page.
 @details
 This page groups the main CMSIS++ Driver classes. 

 TODO: add content
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-diag CMSIS++ Diag
 @brief  CMSIS++ Diagnostic & Trace summary page.
 @details
 This page groups the main classes providing support for 
 diagnostics. For example the `trace::printf()` functions are defined here.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-posix-io CMSIS++ POSIX I/O
 @brief  CMSIS++ POSIX I/O summary page.
 @details
 This page groups the main classes providing support for standard
 POSIX I/O (uniform access to dtream devices, files, sockets).

 TODO: add content
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-app-config CMSIS++ App Config
 @brief  CMSIS++ application configuration definitions.
 @details
 Applications using CMSIS++ can be configured during 
 build time using
 several proprocessor definitions, grouped in a header file 
 named `<cmsis-plus/os-app-config.h>`.

 There are two kinds of definitions:

 - definitions with values (`OS_INTEGER_*`, `OS_BOOL_*`, `OS_STRING_*`, ...);
 for these definitions the value should be used 
 only in an expression of the given type; to avoid misunderstandings,
 parenthesis are recommended;
 - definitions without values (`OS_INCLUDE_*`, `OS_EXCLUDE_*`, `OS_USE_*`, 
 `OS_TRACE_*`, ...); for these definitions only the presence should be tested;
 the value, if present, should be completely ignored.
 
 */

/**
 @defgroup cmsis-plus-app-config-cmdline Command line options
 @ingroup cmsis-plus-app-config
 @brief  Definitions passed via the compiler command line.
 @details
 Most of the configuration options can be passed via the configuration file,
 but this requires each source file to include the configuration files. 
 However some options are too important to be missed and should be 
 passed via the compiler command line.
 */

/**
 @defgroup cmsis-plus-app-config-startup Start-up & general options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the program start-up.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-lib Library options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure various library options.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-rtos RTOS options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the RTOS.
 @details
 */

/**
 @defgroup cmsis-plus-app-config-trace Trace options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the trace channel.
 @details
 In addition to the global `TRACE` definition, it is possible to
 enable individual groups of messages, using separate definitions.
 */

/**
 @defgroup cmsis-plus-app-config-port Custom RTOS options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to select various custom RTOS port implementations.
 @details
 The CMSIS++ RTOS API can be configured to run on top of another
 RTOS scheduler (like FreeRTOS). It is also possible to select
 each synchronisation objects to use either the custom port objects or
 the CMSIS++ reference C++ implementations.
 */

// ----------------------------------------------------------------------------
