/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom 
 * the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 @defgroup cmsis-plus-core CMSIS++ Core
 @brief  CMSIS++ Core summary page.
 @details
 TODO: add core definitions.
 */

/**
 @defgroup cmsis-plus-startup CMSIS++ Startup
 @brief  CMSIS++ Startup summary page.
 @details
 TODO: add startup definitions.
 */


/**
 @defgroup cmsis-plus-rtos CMSIS++ RTOS C++ API
 @brief  CMSIS++ RTOS C++ API summary page.
 @details
 The C++ API is the main interface to the CMSIS++ RTOS, and is the native
 interface used for the implementation.

 The API is composed of a series of classes, subclasses, types and  
 several namespaces.

 To use the C++ API, include the `<cmsis-plus/rtos/os.h>` header.

 */

/**
 @defgroup cmsis-plus-rtos-c CMSIS++ RTOS C API
 @brief  CMSIS++ RTOS C API summary page.
 @details
 The C API maps most of the basic C++ functionality to C programmers.
 Usually the overhead is minimal, one function call. The object pointer
 is passsed as the first parameter. The names are prefixed with a unique
 string inspired by the namespace qualifier.

 To use the C API, include the `<cmsis-plus/rtos/os-c-api.h>` header.
 */

/**
 @defgroup cmsis-plus-iso CMSIS++ ISO Standard C++ Threads
 @brief  CMSIS++ ISO Threads summary page.
 @details
 This page groups the main CMSIS++ ISO Threads classes and namespaces.

 @par Standards
 These definitions provide implementations for the classes defined in 
 the **C++ Standard ISO/IEC 14882:2011(E) Third edition (2011-09-01)**.
 */

/**
 @defgroup cmsis-plus-drivers CMSIS++ Drivers
 @brief  CMSIS++ Drivers summary page.
 @details
 This page groups the main CMSIS++ Driver classes. 

 TODO: add content
 */

/**
 @defgroup cmsis-plus-diag CMSIS++ Diag
 @brief  CMSIS++ Diagnostic & Trace summary page.
 @details
 This page groups the main classes providing support for 
 diagnostics. For example the `trace::printf()` functions are defined here.
 */

/**
 @defgroup cmsis-plus-posix-io CMSIS++ POSIX I/O
 @brief  CMSIS++ POSIX I/O summary page.
 @details
 This page groups the main classes providing support for standard
 POSIX I/O (uniform access to dtream devices, files, sockets).

 TODO: add content
 */

/**
 @defgroup cmsis-plus-app-config CMSIS++ App Config
 @brief  CMSIS++ application configuration definitions.
 @details
 Applications using CMSIS++ can be configured during 
 build time using
 several proprocessor definitions, grouped in a header file 
 named `<cmsis-plus/os-app-config.h>`.

 There are two kinds of definitions:

 - definitions with values (`OS_INTEGER_*`, `OS_BOOL_*`, `OS_STRING_*`, ...);
 for these definitions the value should be appropriate to be used 
 in an expression of the given type; to avoid misunderstandings,
 parenthesis are recommended;
 - definitions without values (`OS_INCLUDE_*`, `OS_EXCLUDE_*`, `OS_USE_*`, 
 `OS_TRACE_*`, ...); for these definitions only the presence should be tested;
 the value, if present, should be completely ignored.
 
 */

/**
 @defgroup cmsis-plus-app-config-cmdline Command line options
 @ingroup cmsis-plus-app-config
 @brief  Definitions passed via the compiler command line.
 @details
 Major configuration options should be passed via the
 compiler command line.

 */

/**
 @defgroup cmsis-plus-app-config-port Select custom implementations
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to select various custom port implementations.
 @details
 The CMSIS++ RTOS API can be configured to run on top of another
 RTOS scheduler (like FreeRTOS). It is also possible to select
 each synchronisation objects to use either the custom port objects or
 the CMSIS++ reference C++ implementations.

 */

/**
 @defgroup cmsis-plus-app-config-trace Trace options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the trace channel.
 @details
 In addition to the global `TRACE` definition, it is possible to
 enable individual groups of messages, using separate definitions.
 */
