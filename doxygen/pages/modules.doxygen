/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom 
 * the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 @defgroup cmsis-plus-core CMSIS++ Core
 @brief  CMSIS++ Core summary page.
 @details
 TODO: add core definitions.
 */

/**
 @defgroup cmsis-plus-startup CMSIS++ Startup
 @brief  CMSIS++ Startup summary page.
 @details
 TODO: add startup definitions.
 */


/**
 @defgroup cmsis-plus-rtos CMSIS++ RTOS C++ API
 @brief  CMSIS++ RTOS C++ API summary page.
 @details
 The C++ API is the main interface to the CMSIS++ RTOS, and is the native
 interface used for the implementation.

 The API is composed of a series of classes, subclasses, types and  
 several namespaces.

 To use the C++ API, include the `<cmsis-plus/rtos/os.h>` header.

 */

/**
 @defgroup cmsis-plus-rtos-c CMSIS++ RTOS C API
 @brief  CMSIS++ RTOS C API summary page.
 @details
 The C API maps most of the basic C++ functionality to C programmers.
 Usually the overhead is minimal, one function call. The object pointer
 is passsed as the first parameter. The names are prefixed with a unique
 string inspired by the namespace qualifier.

 To use the C API, include the `<cmsis-plus/rtos/os-c-api.h>` header.
 */

/**
 @defgroup cmsis-plus-iso CMSIS++ ISO Standard C++ Threads
 @brief  CMSIS++ ISO Threads summary page.
 @details
 This page groups the main CMSIS++ ISO Threads classes and namespaces.

 @par Standards
 These definitions provide implementations for the classes defined in 
 the **C++ Standard ISO/IEC 14882:2011(E) Third edition (2011-09-01)**.
 */

/**
 @defgroup cmsis-plus-drivers CMSIS++ Drivers
 @brief  CMSIS++ Drivers summary page.
 @details
 This page groups the main CMSIS++ Driver classes. 

 TODO: add content
 */

/**
 @defgroup cmsis-plus-diag CMSIS++ Diag
 @brief  CMSIS++ Diagnostic & Trace summary page.
 @details
 This page groups the main classes providing support for 
 diagnostics. For example the `trace::printf()` functions are defined here.
 */

/**
 @defgroup cmsis-plus-posix-io CMSIS++ POSIX I/O
 @brief  CMSIS++ POSIX I/O summary page.
 @details
 This page groups the main classes providing support for standard
 POSIX I/O (uniform access to dtream devices, files, sockets).

 TODO: add content
 */

/**
 @defgroup cmsis-plus-app-config CMSIS++ App Config
 @brief  CMSIS++ application configuration definitions.
 @details
 This page groups the preprocessor definitions used to configure
 a CMSIS++ application.
 */

/**
 @defgroup cmsis-plus-app-config-port Port components selections
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to select various port components.
 @details
 This page groups the preprocessor definitions used to select
 different components from a CMSIS++ port, like whether to use
 the port scheduler or the CMSIS++ reference scheduler.
 */

/**
 @defgroup cmsis-plus-app-config-trace Trace options
 @ingroup cmsis-plus-app-config
 @brief  Definitions used to configure the trace channel.
 @details
 This page groups the preprocessor definitions used to configure
 the trace channel used to display debug messages.
 */
