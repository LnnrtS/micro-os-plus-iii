/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef CMSIS_PLUS_ISO_MEMORY_
#define CMSIS_PLUS_ISO_MEMORY_

// Required for lock_guard
//#include <cmsis-plus/estd/mutex>
#include <cmsis-plus/estd/system_error>
#include <cmsis-plus/diag/trace.h>

#include <cstddef>
#include <cerrno>
#include <cassert>
#include <limits>
#include <memory>

// ----------------------------------------------------------------------------

namespace os
{
  namespace estd
  {

    // ========================================================================

    [[noreturn]] void
    __throw_bad_alloc (int ev, const char* what_arg);

    // ========================================================================

    class memory_resource;

    /**
     * @brief Compare the `memory_resource` instances for equality.
     * @param lhs First instance to compare.
     * @param rhs Second instance to compare.
     * @retval true The two object `memory_resource` instances are equal.
     * @retval false The two object `memory_resource` instances are not equal.
     */
    bool
    operator== (const memory_resource& lhs, const memory_resource& rhs)
        noexcept;

    /**
     * @brief Compare the `memory_resource` instances for inequality.
     * @param lhs First instance to compare.
     * @param rhs Second instance to compare.
     * @retval true The two object `memory_resource` instances are not equal.
     * @retval false The two object `memory_resource` instances are equal.
     */
    bool
    operator!= (const memory_resource& lhs, const memory_resource& rhs)
        noexcept;

    template<typename T>
      class polymorphic_allocator;

    template<typename T1, typename T2>
      bool
      operator== (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

    template<typename T1, typename T2>
      bool
      operator!= (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

    // Global memory resources
    memory_resource*
    new_delete_resource () noexcept;

    memory_resource*
    null_memory_resource () noexcept;

    // The default memory resource
    memory_resource*
    set_default_resource (memory_resource* r) noexcept;

    memory_resource*
    get_default_resource () noexcept;

    extern memory_resource* default_resource;

    // ========================================================================

    /**
     * @brief Memory resource manager.
     * @headerfile os.h <cmsis-plus/estd/memory_resource>
     */
    class memory_resource
    {

    public:

      static constexpr std::size_t max_align = alignof(std::max_align_t);
      static constexpr std::size_t no_throw = (1 << 30);

      /**
       * @name Constructors & Destructor
       * @{
       */

      /**
       * @brief Destruct the memory resource object instance.
       */

      virtual
      ~memory_resource ();

      /**
       * @}
       */

    public:

      /**
       * @name Public Member Functions
       * @{
       */

      /**
       * @brief Allocate memory.
       * @param bytes
       * @param alignment
       */
      void*
      allocate (std::size_t bytes, std::size_t alignment = max_align);

      /**
       * @brief Allocate memory, no throw.
       * @param no_throw
       * @param bytes
       * @param alignment
       */
      void*
      allocate (const std::nothrow_t& no_throw, std::size_t bytes,
                std::size_t alignment = max_align) noexcept;

      /**
       * @brief Deallocate memory.
       * @param p
       * @param bytes
       * @param alignment
       */
      void
      deallocate (void* addr, std::size_t bytes, std::size_t alignment =
                      max_align);

      /**
       * @brief Deallocate memory, no throw.
       * @param no_throw
       * @param p
       * @param bytes
       * @param alignment
       */
      void
      deallocate (const std::nothrow_t& no_throw, void* addr, std::size_t bytes,
                  std::size_t alignment = max_align) noexcept;

      /**
       * @brief Compare for equality with another memory_resource.
       * @param other
       * @retval true The `memory_resource` objects are equal.
       * @retval false The `memory_resource` objects are not equal.
       */
      bool
      is_equal (memory_resource const & other) const noexcept;

      /**
       * @}
       */

    protected:

      /**
       * @name Private Member Functions
       * @{
       */

      /**
       * @brief Allocate memory implementation.
       * @param bytes
       * @param alignment Shall be a power of two.
       */
      virtual void*
      do_allocate (std::size_t bytes, std::size_t alignment) = 0;

      /**
       * @brief Deallocate memory implementation.
       * @param p
       * @param bytes
       * @param alignment
       */
      virtual void
      do_deallocate (void* p, std::size_t bytes, std::size_t alignment) = 0;

      /**
       * @brief Compare for equality implementation.
       * @param other
       * @retval true The `memory_resource` objects are equal.
       * @retval false The `memory_resource` objects are not equal.
       */
      virtual bool
      do_is_equal (memory_resource const &other) const noexcept;

      static constexpr std::size_t
      do_align (std::size_t size, std::size_t align);

      /**
       * @}
       */

    };

    // ======================================================================

    template<typename T>
      class polymorphic_allocator
      {
      public:

        typedef T value_type;

        polymorphic_allocator () noexcept;

        polymorphic_allocator (memory_resource* r) noexcept;

        polymorphic_allocator (polymorphic_allocator const & a) = default;

        template<typename U>
          polymorphic_allocator (polymorphic_allocator<U> const & other)
              noexcept;

        polymorphic_allocator&
        operator= (polymorphic_allocator const & a) = default;

        value_type*
        allocate (std::size_t n);

        void
        deallocate (value_type* p, std::size_t n) noexcept;

        std::size_t
        max_size (void) const noexcept;

        polymorphic_allocator
        select_on_container_copy_construction (void) const noexcept;

        memory_resource*
        resource (void) const noexcept;

      private:

        memory_resource* res_;
      };

  // ------------------------------------------------------------------------

  } /* namespace estd */
} /* namespace os */

// ===== Inline & template implementations ====================================

namespace os
{
  namespace estd
  {

    // ========================================================================

    inline memory_resource*
    get_default_resource (void) noexcept
    {
      return default_resource;
    }

    // ========================================================================

    /**
     * @details
     * Allocates storage with a size of at least bytes bytes. The returned
     * storage is aligned to the specified alignment if such alignment
     * is supported, and to `alignof(std::max_align_t)` otherwise.
     *
     * Equivalent to `return do_allocate(bytes, alignment);`.
     *
     * @par Exceptions
     *   Throws an exception if storage of the requested size
     *   and alignment cannot be obtained.
     *
     * @see do_allocate();
     */
    inline void*
    memory_resource::allocate (std::size_t bytes, std::size_t alignment)
    {
      return do_allocate (bytes, alignment);
    }

    /**
     * @details
     * Allocates storage with a size of at least bytes bytes. The returned
     * storage is aligned to the specified alignment if such alignment
     * is supported, and to `alignof(std::max_align_t)` otherwise.
     *
     * Equivalent to `return do_allocate(bytes, alignment);`.
     *
     * @par Exceptions
     *   Throws nothing.
     *
     * @par Standard compliance
     *   Extension to standard.
     *
     * @see do_allocate();
     */
    inline void*
    memory_resource::allocate (const std::nothrow_t&, std::size_t bytes,
                               std::size_t alignment) noexcept
    {
      return do_allocate (bytes, alignment | memory_resource::no_throw);
    }

    /**
     * @details
     * Deallocates the storage pointed to by p. p shall have been returned
     * by a prior call to `allocate(bytes, alignment)` on a memory_resource
     * that compares equal to *this, and the storage it points to shall
     * not yet have been deallocated.
     *
     * Equivalent to `return do_deallocate(p, bytes, alignment);`.
     *
     * @par Exceptions
     *   May throw an exception for error cases (To be defined).
     *
     * @see do_deallocate();
     */
    inline void
    memory_resource::deallocate (void* p, std::size_t bytes,
                                 std::size_t alignment)
    {
      do_deallocate (p, bytes, alignment);
    }

    /**
     * @details
     * Deallocates the storage pointed to by p. p shall have been returned
     * by a prior call to `allocate(bytes, alignment)` on a memory_resource
     * that compares equal to *this, and the storage it points to shall
     * not yet have been deallocated.
     *
     * Equivalent to `return do_deallocate(p, bytes, alignment);`.
     *
     * @par Exceptions
     *   Throws nothing.
     *
     * @par Standard compliance
     *   Extension to standard.
     *
     * @see do_deallocate();
     */
    inline void
    memory_resource::deallocate (const std::nothrow_t&, void* p,
                                 std::size_t bytes, std::size_t alignment) noexcept
    {
      do_deallocate (p, bytes, alignment | memory_resource::no_throw);
    }

    /**
     * @details
     * Compares `*this` for equality with other. Two `memory_resources`
     * compare equal if and only if memory allocated from one
     * `memory_resource` can be deallocated from the other and vice versa.
     *
     * @par Exceptions
     *   Throws nothing.
     *
     * @see do_is_equal();
     */
    inline bool
    memory_resource::is_equal (memory_resource const & other) const noexcept
    {
      return do_is_equal (other);
    }

    /**
     * @details
     *
     * @par Standard compliance
     *   Extension to standard.
     */
    inline constexpr std::size_t
    memory_resource::do_align (std::size_t size, std::size_t align)
    {
      return ((size) + (align) - 1L) & ~((align) - 1L);
    }

    // ======================================================================

    template<typename T>
      polymorphic_allocator<T>::polymorphic_allocator () noexcept :
      res_(get_default_resource())
        {
          ;
        }

    template<typename T>
      inline
      polymorphic_allocator<T>::polymorphic_allocator (memory_resource* r) noexcept :
      res_(r)
        {
          ;
        }

    template<typename T>
      template<typename U>
        inline
        polymorphic_allocator<T>::polymorphic_allocator (
            polymorphic_allocator<U> const & other) noexcept :
        res_(other.resource())
          {
            ;
          }

    template<typename T>
      inline typename polymorphic_allocator<T>::value_type*
      polymorphic_allocator<T>::allocate (std::size_t n)
      {
        if (n > max_size ())
          {
            estd::__throw_system_error (
                EINVAL, "polymorphic_allocator<T>::allocate(std::size_t n)"
                " 'n' exceeds maximum supported size");
          }

        return static_cast<value_type*> (res_->allocate (n * sizeof(value_type),
                                                         alignof(value_type)));
      }

    template<typename T>
      inline void
      polymorphic_allocator<T>::deallocate (value_type* p, std::size_t n) noexcept
      {
        assert(n <= max_size ());
        res_->deallocate (p, n * sizeof(value_type), alignof(value_type));
      }

    template<typename T>
      inline std::size_t
      polymorphic_allocator<T>::max_size (void) const noexcept
      {
        return std::numeric_limits<std::size_t>::max () / sizeof(value_type);
      }

    template<typename T>
      inline polymorphic_allocator<T>
      polymorphic_allocator<T>::select_on_container_copy_construction (
          void) const noexcept
      {
        return polymorphic_allocator ();
      }

    template<typename T>
      inline memory_resource*
      polymorphic_allocator<T>::resource (void) const noexcept
      {
        return res_;
      }

    // ========================================================================

    /**
     * @details
     * @par Exceptions
     *   Throws nothing.
     */
    inline bool
    operator== (memory_resource const & lhs, memory_resource const & rhs) noexcept
    {
      return &lhs == &rhs || lhs.is_equal (rhs);
    }

    inline bool
    operator!= (memory_resource const & lhs, memory_resource const & rhs) noexcept
    {
      return !(lhs == rhs);
    }

    // ======================================================================

    template<typename T, typename U>
      inline bool
      operator== (polymorphic_allocator<T> const & lhs,
                  polymorphic_allocator<U> const & rhs) noexcept
      {
        return *lhs.resource () == *rhs.resource ();
      }

    template<typename T, typename U>
      inline bool
      operator!= (polymorphic_allocator<T> const & lhs,
                  polymorphic_allocator<U> const & rhs) noexcept
      {
        return !(lhs == rhs);
      }

  // --------------------------------------------------------------------------

  } /* namespace estd */
} /* namespace os */

// ----------------------------------------------------------------------------

#endif /* CMSIS_PLUS_ISO_MEMORY_ */
